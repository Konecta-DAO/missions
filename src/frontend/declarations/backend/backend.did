type HttpHeader = record {
  name: text;
  value: text;
};

type HttpResponsePayload = record {
  status: nat;
  headers: vec HttpHeader;
  body: vec nat8;
};

type TransformArgs = record {
  response: HttpResponsePayload;
  context: blob;
};

type CanisterHttpResponsePayload = record {
  status: nat;
  headers: vec HttpHeader;
  body: vec nat8;
};

type User = record {
  id : text;
  mission : nat;
  seconds : nat;
  twitterid : nat;
  twitterhandle : text;
  creationTime : int;
};

type Mission = record {
  id : nat;
  mode : nat;
  description : text;
  obj1 : text;
  obj2 : text;
  recursive : bool;
  howmany : int;
};

type Backend = service {
  getIds: () -> (vec text) query;
  registerid: (text, nat) -> ();
  resetall: () -> ();
  get_trusted_origins: () -> (vec text) query;
  getSeconds: (text, nat) -> (?nat) query;
  getTotalSeconds: (text) -> (nat) query;
  addTweet: (text, nat) -> ();
  transform: (TransformArgs) -> (CanisterHttpResponsePayload) query;
  availableCycles: () -> (nat) query;
  verifyFollow: (text) -> (bool);
  handleTwitterCallback: (text, text, text) -> (?User);
  addUser: (text, nat) -> ();
  isMiddlemanReachable: () -> (bool);
  addMission: (nat, nat, text, text, text, bool) -> ();
  getNumberOfMissions: () -> (nat) query;
  getMissionById: (nat) -> (?Mission) query;
};
