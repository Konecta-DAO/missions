type HttpHeader = record {
  name : text;
  value : text;
};

type HttpRequestArgs = record {
  url : text;
  max_response_bytes : opt nat64;
  headers : vec HttpHeader;
  body : opt vec nat8;
  method : variant { get; post; head };
  transform : opt record {
    function : principal;
    context : blob;
  };
};

type HttpResponsePayload = record {
  status : nat;
  headers : vec HttpHeader;
  body : vec nat8;
};

type TransformArgs = record {
  response : HttpResponsePayload;
  context : blob;
};

type CanisterHttpResponsePayload = record {
  status : nat;
  headers : vec HttpHeader;
  body : vec nat8;
};

type SerializedUser = record {
  id : principal;
  twitterid : opt nat;
  twitterhandle : opt text;
  creationTime : int;
};

type SerializedMission = record {
  id : nat;
  title : text;
  description : text;
  obj1 : opt text;
  obj2 : text;
  inputPlaceholder : opt text;
  startDate : int;
  endDate : int;
  recursive : bool;
  mintime : int;
  maxtime : int;
  functionName1 : opt text;
  functionName2 : text;
  image : text;
  secretCodes : opt text;
  mode : nat;
  requiredPreviousMissionId : opt nat;
};

type SerializedProgress = record {
  completionHistory : vec record {
    timestamp : int;
    pointsEarned : nat;
    tweetId : opt text;
  };
  usedCodes : vec record { text; bool };
};

service : {
  // General and utility functions
  getIds : () -> (vec text) query;
  resetall : () -> ();
  icrc28_trusted_origins : () -> (vec text) query;
  availableCycles : () -> (nat) query;
  isMiddlemanReachable : () -> (bool);

  // Twitter and social interaction
  addTweet : (text, nat) -> ();
  getTweets : (text) -> (opt vec record { nat; nat });
  verifyFollow : (text) -> (bool);
  handleTwitterCallback : (principal, text, text) -> (opt SerializedUser);
  addTwitterInfo : (principal, opt nat, opt text) -> ();

  // User management
  addUser : (principal) -> ();
  getUsers : () -> (vec SerializedUser) query;

  // Admin management
  addAdminId : (text) -> ();
  getAdminIds : () -> (vec text) query;
  removeAdminId : (text) -> ();
  isAdmin : (principal) -> (bool) query; // Reinstated isAdmin function

  // Mission management
  addMission : (SerializedMission) -> ();
  getNumberOfMissions : () -> (nat) query;
  getMissionById : (nat) -> (opt SerializedMission) query;
  getAllMissions : () -> (vec SerializedMission) query;
  countUsersWhoCompletedMission : (nat) -> (nat) query;

  // Progress and secret code handling
  updateUserProgress : (principal, nat, SerializedProgress) -> ();
  getProgress : (principal, nat) -> (opt SerializedProgress) query;
  submitSecretCode : (principal, nat, text) -> (bool);
  getEarnedForMission : (principal, nat) -> (opt nat) query;

  // New function
  getTotalSecondsForUser : (principal) -> (?nat) query;

  // HTTP and transformation
  transform : (TransformArgs) -> (CanisterHttpResponsePayload) query;

  // Media upload (image upload)
  uploadMissionImage : (text, blob) -> (text);
};